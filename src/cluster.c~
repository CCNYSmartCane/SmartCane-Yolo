#include <stdlib.h>
#include <stdio.h>
#include <float.h>
#include <string.h>
#include <math.h>
#include "darknet.h"
#include "cluster.h"
#include <stdlib.h>
#include <stdio.h>



double* cluster(framewindow input, FILE *fp, FILE *fp2){
    //box detections[845];
    int s = 0;
    int t = 0;
    size_t total = input.size1+input.size2+input.size3
                    +input.size4+input.size5+input.size6
                    +input.size7+input.size8+input.size9+input.size10;
    int d_old[total];
    d_old[0] = 1000; //need this to overcome zero initialization
    
    box* detections = malloc(total*sizeof(box));

    double *centroids = malloc(2*input.size10*sizeof(double));           // [2*input.size3]; //double the orignal size (one for x, one for y)


    printf("intialized for clustering...\n");

    memcpy(detections,input.frame1,sizeof(box)*input.size1);

    memcpy(&detections[input.size1],input.frame2,sizeof(box)*input.size2);
 
    memcpy(&detections[input.size1+input.size2],input.frame3,sizeof(box)*input.size3);

    memcpy(&detections[input.size1+input.size2+input.size3],input.frame4,sizeof(box)*input.size4);

    memcpy(&detections[input.size1+input.size2+input.size3+input.size4],input.frame5,sizeof(box)*input.size5);

    memcpy(&detections[input.size1+input.size2+input.size3+input.size4+input.size5],input.frame6,sizeof(box)*input.size6);

    memcpy(&detections[input.size1+input.size2+input.size3+input.size4+input.size5
                      +input.size6],input.frame7,sizeof(box)*input.size7);

    memcpy(&detections[input.size1+input.size2+input.size3+input.size4+input.size5
                      +input.size6+input.size7],input.frame8,sizeof(box)*input.size8);

    memcpy(&detections[input.size1+input.size2+input.size3+input.size4+input.size5
                      +input.size6+input.size7+input.size8],input.frame9,sizeof(box)*input.size9);

    memcpy(&detections[input.size1+input.size2+input.size3+input.size4+input.size5
                      +input.size6+input.size7+input.size8+input.size9],input.frame10,sizeof(box)*input.size10);

    printf("copied all dectections to detection buffer...\n");
    
    /*INITIAL GUESSES FOR CENTROIDS*/
    for(s = 0; s < input.size10; ++s){
        centroids[2*s] = input.frame10[s].x;
        centroids[2*s+1] = input.frame10[s].y;
        //printf("init x:%f\n",centroids[2*i]);
         //printf("init y:%f\n",centroids[2*i+1]);
    }
    
    printf("created initial guesses for centroids...\n");

    size_t iters = 0;
    
    while(1){
        int d[total]; //indices of centroids
        double d_temp = 0.0;
        ++iters;
        //assignment step
        for(s = 0; s < total; ++s){
            double d_min = 99999.99;
            for(t = 0; t < input.size10; ++t){
                //printf("x coord:%f\n",detections[s].x);
                d_temp = (pow(detections[s].x-centroids[2*t],2)+
                              pow(detections[s].y-centroids[2*t+1],2));
                if(d_temp<d_min){
                    d[s] = t;
                    d_min = d_temp;
                }
            }
            //printf("%d\nx:%f\ny:%f\n",d[s],detections[s].x,detections[s].y);
        }
        printf("assignment step complete...\n");  

        /*UPDATE CENTROIDS TO MEANS OF EACH NEW CLUSTER*/
        for(s = 0; s < input.size10; ++s){
            //printf("size10: %d\n",input.size10);
            double numer_x = 0.0;
            double numer_y = 0.0;
            double denom = 0.0;
            //printf("Total detections: %d\n",total);
            for(t = 0; t < total; ++t){
                if(d[t] == s){
                    // save x/y of detections for future calculation of obj func
                    numer_x += detections[t].x;
                    numer_y += detections[t].y;
                    denom += 1.0;

                    fprintf(fp2,"%d\t%d\t%f\t%f\n",iters,s,detections[t].x,detections[t].y);
                }
            }
            //printf("found all corresponding detections...\n");
           // save all centroids to txt file (1)
            centroids[2*s] = numer_x/denom;
            centroids[2*s+1] = numer_y/denom;
            //printf("x:%f\n",centroids[2*s]);
            //printf("y:%f\n",centroids[2*s+1]);
            fprintf(fp2,"\t%d\t%f\t%f\n",s,centroids[2*s],centroids[2*s+1]); //might need to stick an extra new line here
        }
        printf("update step complete...\n");
        size_t flag = 0;

        while(d[flag] == d_old[flag]){
            if(flag == total-1){
              
                for(s = 0; s < input.size10; ++s){
                    printf("total:%d\n",total);
                    printf("cluster number:%d\n",s+1);
                    printf("iterations to cluster:%d\n",iters);
                    printf("x:%f\n",centroids[2*s]);
                    printf("y:%f\n",centroids[2*s+1]);
                    //save final centroids to txt file 
                    fprintf(fp,"\t%f\t%f\n",centroids[2*s],centroids[2*s+1]);

                    //save corresponding detections to centroid struct
                }
                fprintf(fp2,"done\n");
                free(detections);
                return (double *)centroids;
            }
            else{
                ++flag;
            }
        }
        for(s = 0; s <total; ++s){
            d_old[s] = d[s];
        }
        fprintf(fp2,"\n");
    }
}
